(module system racket/base
	(provide login-server-packet/init)
	(require "../../packet.scm")

(define (xor data) 
  (define (r pos edx ecx)
    (when (<= 4 pos)
      (let ((edx (bitwise-and (bitwise-xor (integer-bytes->integer (subbytes data pos (+ pos 4)) #f) (bitwise-and ecx #xffffffff)) #xffffffff)))
        (let (
              (ecx (bitwise-and (- ecx edx) #xffffffff))
              (edxb (integer->integer-bytes edx 4 #f))
              ) 
        (bytes-set! data pos (bytes-ref edxb 0))
        (bytes-set! data (+ pos 1) (bytes-ref edxb 1))
        (bytes-set! data (+ pos 2) (bytes-ref edxb 2))
        (bytes-set! data (+ pos 3) (bytes-ref edxb 3))
        (r (- pos 4) edx ecx)
        ))
      ))
  (begin
    (let ((key (integer-bytes->integer (subbytes data (- (bytes-length data) 8) (- (bytes-length data) 4)) #f)))
    (r (- (bytes-length data) 12) 0 key))
    data)
)
	
	(define (login-server-packet/init buffer)
		(let ((s (open-input-bytes (xor buffer))))
			(list
				(cons 'id (read-byte s))
				(cons 'session-id (read-int32 #f s))
				(cons 'protocol (read-int32 #f s))
				(cons 'rsa-key (scramble (read-bytes 128 s)))
				(cons 'gg1 (read-int32 #f s))
				(cons 'gg2 (read-int32 #f s))
				(cons 'gg3 (read-int32 #f s))
				(cons 'gg4 (read-int32 #f s))
				(cons 'blowfish-key (read-bytes 16 s))
				(cons 'termination (read-byte s))
			)
		)
	)
)